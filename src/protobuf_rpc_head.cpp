/**
 * Autogenerated by Pebble Compiler (1.0.0.652 11:33:50 Sep 20 2017)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 * Copyright (c) 2015, Tencent Inc. All rights reserved.
 */
#include <algorithm>
#include <ostream>

#include "dr/common/to_string.h"
#include "platform.h"
#include "protobuf_rpc_head.h"

namespace pebble {


ProtoBufRpcHead::~ProtoBufRpcHead() throw() {
}


void ProtoBufRpcHead::__set_version(const int32_t val) {
    this->version = val;
__isset.version = true;
}

void ProtoBufRpcHead::__set_msg_type(const int32_t val) {
    this->msg_type = val;
}

void ProtoBufRpcHead::__set_session_id(const uint64_t val) {
    this->session_id = val;
}

void ProtoBufRpcHead::__set_function_name(const std::string& val) {
    this->function_name = val;
}

void ProtoBufRpcHead::__set_timeout_ms(const int32_t val) {
    this->timeout_ms = val;
__isset.timeout_ms = true;
}

void ProtoBufRpcHead::__set_timestamp(const uint64_t val) {
    this->timestamp = val;
__isset.timestamp = true;
}

const char* ProtoBufRpcHead::ascii_fingerprint = "C8E71C065DE94123F9134208BA2969F1";
const uint8_t ProtoBufRpcHead::binary_fingerprint[16] = {0xC8, 0xE7, 0x1C, 0x06, 0x5D, 0xE9, 0x41, 0x23, 0xF9, 0x13, 0x42, 0x08, 0xBA, 0x29, 0x69, 0xF1};

uint32_t ProtoBufRpcHead::read(::pebble::dr::protocol::TProtocol* iprot) {

    uint32_t xfer = 0;
    std::string fname;
    ::pebble::dr::protocol::TType ftype;
    int16_t fid;

    xfer += iprot->readStructBegin(fname);

    using ::pebble::dr::protocol::TProtocolException;


    while (true)
    {
        xfer += iprot->readFieldBegin(fname, ftype, fid);
        if (ftype == ::pebble::dr::protocol::T_STOP) {
                break;
        }
        if (fid == -1) {
            if (fname == "version") {
                fid = 1;
            }
            else if (fname == "msg_type") {
                fid = 2;
            }
            else if (fname == "session_id") {
                fid = 3;
            }
            else if (fname == "function_name") {
                fid = 4;
            }
            else if (fname == "timeout_ms") {
                fid = 5;
            }
            else if (fname == "timestamp") {
                fid = 6;
            }
        }
        switch (fid)
        {
            case 1:
                if (ftype == ::pebble::dr::protocol::T_NULL || ftype == ::pebble::dr::protocol::T_I32) {
                    xfer += iprot->readI32(reinterpret_cast<int32_t&>(this->version));
                    this->__isset.version = true;
                } else {
                    xfer += iprot->skip(ftype);
                }
                break;
            case 2:
                if (ftype == ::pebble::dr::protocol::T_NULL || ftype == ::pebble::dr::protocol::T_I32) {
                    xfer += iprot->readI32(reinterpret_cast<int32_t&>(this->msg_type));
                    this->__isset.msg_type = true;
                } else {
                    xfer += iprot->skip(ftype);
                }
                break;
            case 3:
                if (ftype == ::pebble::dr::protocol::T_NULL || ftype == ::pebble::dr::protocol::T_I64) {
                    xfer += iprot->readI64(reinterpret_cast<int64_t&>(this->session_id));
                    this->__isset.session_id = true;
                } else {
                    xfer += iprot->skip(ftype);
                }
                break;
            case 4:
                if (ftype == ::pebble::dr::protocol::T_NULL || ftype == ::pebble::dr::protocol::T_STRING) {
                    xfer += iprot->readString(this->function_name);
                    this->__isset.function_name = true;
                } else {
                    xfer += iprot->skip(ftype);
                }
                break;
            case 5:
                if (ftype == ::pebble::dr::protocol::T_NULL || ftype == ::pebble::dr::protocol::T_I32) {
                    xfer += iprot->readI32(reinterpret_cast<int32_t&>(this->timeout_ms));
                    this->__isset.timeout_ms = true;
                } else {
                    xfer += iprot->skip(ftype);
                }
                break;
            case 6:
                if (ftype == ::pebble::dr::protocol::T_NULL || ftype == ::pebble::dr::protocol::T_I64) {
                    xfer += iprot->readI64(reinterpret_cast<int64_t&>(this->timestamp));
                    this->__isset.timestamp = true;
                } else {
                    xfer += iprot->skip(ftype);
                }
                break;
            default:
                xfer += iprot->skip(ftype);
                break;
        }
        xfer += iprot->readFieldEnd();
    }

    xfer += iprot->readStructEnd();

    return xfer;
}

uint32_t ProtoBufRpcHead::write(::pebble::dr::protocol::TProtocol* oprot) const {
    uint32_t xfer = 0;
    oprot->incrementRecursionDepth();
    xfer += oprot->writeStructBegin("ProtoBufRpcHead");

    if (this->__isset.version) {
        xfer += oprot->writeFieldBegin("version", ::pebble::dr::protocol::T_I32, 1);
        xfer += oprot->writeI32(static_cast<int32_t>(this->version));
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldBegin("msg_type", ::pebble::dr::protocol::T_I32, 2);
    xfer += oprot->writeI32(static_cast<int32_t>(this->msg_type));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("session_id", ::pebble::dr::protocol::T_I64, 3);
    xfer += oprot->writeI64(static_cast<int64_t>(this->session_id));
    xfer += oprot->writeFieldEnd();

    xfer += oprot->writeFieldBegin("function_name", ::pebble::dr::protocol::T_STRING, 4);
    xfer += oprot->writeString(this->function_name);
    xfer += oprot->writeFieldEnd();

    if (this->__isset.timeout_ms) {
        xfer += oprot->writeFieldBegin("timeout_ms", ::pebble::dr::protocol::T_I32, 5);
        xfer += oprot->writeI32(static_cast<int32_t>(this->timeout_ms));
        xfer += oprot->writeFieldEnd();
    }
    if (this->__isset.timestamp) {
        xfer += oprot->writeFieldBegin("timestamp", ::pebble::dr::protocol::T_I64, 6);
        xfer += oprot->writeI64(static_cast<int64_t>(this->timestamp));
        xfer += oprot->writeFieldEnd();
    }
    xfer += oprot->writeFieldStop();
    xfer += oprot->writeStructEnd();
    oprot->decrementRecursionDepth();
    return xfer;
}

void swap(ProtoBufRpcHead &a, ProtoBufRpcHead &b) {
    using ::std::swap;
    swap(a.version, b.version);
    swap(a.msg_type, b.msg_type);
    swap(a.session_id, b.session_id);
    swap(a.function_name, b.function_name);
    swap(a.timeout_ms, b.timeout_ms);
    swap(a.timestamp, b.timestamp);
    swap(a.__isset, b.__isset);
}

ProtoBufRpcHead::ProtoBufRpcHead(const ProtoBufRpcHead& other0) {
    version = other0.version;
    msg_type = other0.msg_type;
    session_id = other0.session_id;
    function_name = other0.function_name;
    timeout_ms = other0.timeout_ms;
    timestamp = other0.timestamp;
    __isset = other0.__isset;
}
ProtoBufRpcHead& ProtoBufRpcHead::operator=(const ProtoBufRpcHead& other1) {
    version = other1.version;
    msg_type = other1.msg_type;
    session_id = other1.session_id;
    function_name = other1.function_name;
    timeout_ms = other1.timeout_ms;
    timestamp = other1.timestamp;
    __isset = other1.__isset;
    return *this;
}
std::ostream& operator<<(std::ostream& out, const ProtoBufRpcHead& obj) {
    using pebble::dr::to_string;
    out << "ProtoBufRpcHead(";
    out << "version=";
(obj.__isset.version ? (out << to_string(obj.version)) : (out << "<null>"));
    out << ", " << "msg_type=" << to_string(obj.msg_type);
    out << ", " << "session_id=" << to_string(obj.session_id);
    out << ", " << "function_name=" << to_string(obj.function_name);
    out << ", " << "timeout_ms=";
(obj.__isset.timeout_ms ? (out << to_string(obj.timeout_ms)) : (out << "<null>"));
    out << ", " << "timestamp=";
(obj.__isset.timestamp ? (out << to_string(obj.timestamp)) : (out << "<null>"));
    out << ")";
    return out;
}

} // namespace pebble
