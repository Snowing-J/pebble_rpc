/**
 * Autogenerated by Pebble Compiler (1.0.0.652 11:33:50 Sep 20 2017)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 * Copyright (c) 2015, Tencent Inc. All rights reserved.
 */
#ifndef __protobuf_rpc_head_h__
#define __protobuf_rpc_head_h__

#include <iosfwd>

#include "dr/common/common.h"
#include "dr/protocol/protocol.h"




namespace pebble {

class ProtoBufRpcHead;

typedef struct _ProtoBufRpcHead__isset {
    _ProtoBufRpcHead__isset() : version(false), msg_type(false), session_id(false), function_name(false), timeout_ms(false), timestamp(false) {}
    bool version :1;
    bool msg_type :1;
    bool session_id :1;
    bool function_name :1;
    bool timeout_ms :1;
    bool timestamp :1;
} _ProtoBufRpcHead__isset;

class ProtoBufRpcHead {
public:
    static const char* ascii_fingerprint; // = "C8E71C065DE94123F9134208BA2969F1";
    static const uint8_t binary_fingerprint[16]; // = {0xC8, 0xE7, 0x1C, 0x06, 0x5D, 0xE9, 0x41, 0x23, 0xF9, 0x13, 0x42, 0x08, 0xBA, 0x29, 0x69, 0xF1};

    ProtoBufRpcHead(const ProtoBufRpcHead&);
    ProtoBufRpcHead& operator=(const ProtoBufRpcHead&);
    ProtoBufRpcHead() : version(0), msg_type(0), session_id(0), function_name(), timeout_ms(0), timestamp(0) {
    }

    virtual ~ProtoBufRpcHead() throw();
    int32_t version;
    int32_t msg_type;
    uint64_t session_id;
    std::string function_name;
    int32_t timeout_ms;
    uint64_t timestamp;

    _ProtoBufRpcHead__isset __isset;

    void __set_version(const int32_t val);

    void __set_msg_type(const int32_t val);

    void __set_session_id(const uint64_t val);

    void __set_function_name(const std::string& val);

    void __set_timeout_ms(const int32_t val);

    void __set_timestamp(const uint64_t val);

    bool operator == (const ProtoBufRpcHead & rhs) const
    {
        if (__isset.version != rhs.__isset.version)
            return false;
        else if (__isset.version && !(version == rhs.version))
            return false;
        if (!(msg_type == rhs.msg_type))
            return false;
        if (!(session_id == rhs.session_id))
            return false;
        if (!(function_name == rhs.function_name))
            return false;
        if (__isset.timeout_ms != rhs.__isset.timeout_ms)
            return false;
        else if (__isset.timeout_ms && !(timeout_ms == rhs.timeout_ms))
            return false;
        if (__isset.timestamp != rhs.__isset.timestamp)
            return false;
        else if (__isset.timestamp && !(timestamp == rhs.timestamp))
            return false;
        return true;
    }
    bool operator != (const ProtoBufRpcHead &rhs) const {
        return !(*this == rhs);
    }

    // This must be implemented by the developer if they wish to use it.
    bool operator < (const ProtoBufRpcHead &) const;

    uint32_t read(::pebble::dr::protocol::TProtocol* iprot);
    uint32_t write(::pebble::dr::protocol::TProtocol* oprot) const;

    friend std::ostream& operator<<(std::ostream& out, const ProtoBufRpcHead& obj);
};

void swap(ProtoBufRpcHead &a, ProtoBufRpcHead &b);

} // namespace pebble

#endif // __protobuf_rpc_head_h__
